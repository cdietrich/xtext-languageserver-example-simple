task copyApplication(type: Sync) {
    def installDistTask = project(':org.xtext.example.mydsl.ide').tasks.installDist
    dependsOn installDistTask
    from installDistTask.outputs
    into 'src/mydsl'
}

task clean {
	doLast {
		delete vscodeExtension.destDir
		delete 'out' // output of npmInstall - don't want to delete node_modules
	}
}

apply plugin: 'com.github.node-gradle.node'
node {
	version = '20.18.2'
	npmVersion = '10.8.2'
	download = true
}

def inputFiles = fileTree(
	dir: projectDir, 
	excludes: [ 'out/**', '.gitignore', '.gradle/**', 'build/**', '*.gradle' ]
)

npmInstall {
	inputs.files(inputFiles)
	outputs.dir('out')
}

task vscodeExtension2(dependsOn: [npmInstall], type: NodeTask) {
	ext.destDir = new File(buildDir, 'vscode')
	ext.archiveName = "$project.name-${project.version}.vsix"
	ext.destPath = "$destDir/$archiveName"
	inputs.with {
		files inputFiles
	}
	outputs.dir destDir
	doFirst {
		destDir.mkdirs()
	}
	script = file("node_modules/.bin/vsce")
	args = [ 'package', '--out', destPath ]
	execOverrides {
		workingDir = projectDir
	}
}

task vscodeExtension(dependsOn: [npmInstall], type: NodeTask) {
	ext.destDir = new File(buildDir, 'vscode')
	ext.archiveName = "$project.name-${project.version}.vsix"
	ext.destPath = "$destDir/$archiveName"
	outputs.dir destDir
	doFirst {
		destDir.mkdirs()
	}
	script = file("node_modules/.bin/vsce")
	args = [ 'package', '--out', destPath ]
	execOverrides {
		workingDir = projectDir
	}
}

npmInstall.dependsOn copyApplication

task installExtension(type: Exec, dependsOn: vscodeExtension) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'code.cmd'
    } else {
        commandLine 'code'
    }
    args '--install-extension', vscodeExtension.destPath
}

task startCode(type:Exec, dependsOn: installExtension) {
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'code.cmd'
    } else {
        commandLine 'code'
    }
    args "$rootProject.projectDir/demo/", '--new-window'
}
